- avoid magic numbers and strings instead use named constants
- use meaningful, descriptives names. Your names should reveal intent
- consistency matters
- favor early returns over deep nesting if () return
- avoid long parameters list, group into object, use the Builder pattern
- keep functions small and focused. One function, one responsibility.
- Don’t Repeat Yourself
- prefer composition over inheritance. Inheritance is one of the pillars of OOP, but when misused, it leads to tight coupling, fragile hierarchies
- Composition, on the other hand, favors building classes by combining smaller, reusable components. It leads to flexible and loosely coupled designs.
- Use inheritance when: there’s a clear “is-a” relationship and the base class is stable (e.g., Rectangle extends Shape).
- Use composition when: you want to add behaviors flexibly, avoid tight coupling, or support multiple behaviors (e.g., a Car has an Engine).
- Comment the Why, Not the What

